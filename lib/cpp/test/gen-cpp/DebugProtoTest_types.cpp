/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DebugProtoTest_types.h"

#include <TReflectionLocal.h>

namespace thrift { namespace test { namespace debug {

int _kSomeEnumValues[] = {
  SomeEnum::ONE,
  SomeEnum::TWO
};
const char* _kSomeEnumNames[] = {
  "ONE",
  "TWO"
};
const std::map<int, const char*> _SomeEnum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSomeEnumValues, _kSomeEnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

// enum
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778(
  ::apache::thrift::protocol::T_I32);

const char* Doubles::ascii_fingerprint = "4B056EA3B3FB01EC41613CEB91B54CE5";
const uint8_t Doubles::binary_fingerprint[16] = {0x4B,0x05,0x6E,0xA3,0xB3,0xFB,0x01,0xEC,0x41,0x61,0x3C,0xEB,0x91,0xB5,0x4C,0xE5};

// double
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0(
  ::apache::thrift::protocol::T_DOUBLE);

// void
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34(
  ::apache::thrift::protocol::T_STOP);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5[] = {
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:double;2:double;3:double;4:double;5:double;6:double;7:double;8:double;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5(
  ::apache::thrift::protocol::T_STRUCT,
  Doubles::binary_fingerprint,
  trlo_metas_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5,
  trlo_specs_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5);

::apache::thrift::reflection::local::TypeSpec* Doubles::local_reflection = 
  &trlo_typespec_DebugProtoTest_4B056EA3B3FB01EC41613CEB91B54CE5;

uint32_t Doubles::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->nan);
          this->__isset.nan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inf);
          this->__isset.inf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->neginf);
          this->__isset.neginf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->repeating);
          this->__isset.repeating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->big);
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->small);
          this->__isset.small = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zero);
          this->__isset.zero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->negzero);
          this->__isset.negzero = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Doubles::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Doubles");
  xfer += oprot->writeFieldBegin("nan", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->nan);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("inf", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->inf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("neginf", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->neginf);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("repeating", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->repeating);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("big", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->big);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("small", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->small);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zero", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->zero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("negzero", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->negzero);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OneOfEach::ascii_fingerprint = "DF7CE78394886179BFAFDB65C5A708BC";
const uint8_t OneOfEach::binary_fingerprint[16] = {0xDF,0x7C,0xE7,0x83,0x94,0x88,0x61,0x79,0xBF,0xAF,0xDB,0x65,0xC5,0xA7,0x08,0xBC};

// bool
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305(
  ::apache::thrift::protocol::T_BOOL);

// byte
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091(
  ::apache::thrift::protocol::T_BYTE);

// i16
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5(
  ::apache::thrift::protocol::T_I16);

// i32
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A(
  ::apache::thrift::protocol::T_I32);

// i64
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44(
  ::apache::thrift::protocol::T_I64);

// string
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21(
  ::apache::thrift::protocol::T_STRING);

// list<byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// list<i16>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// list<i64>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC[] = {
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC(
  ::apache::thrift::protocol::T_STRUCT,
  OneOfEach::binary_fingerprint,
  trlo_metas_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  trlo_specs_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC);

::apache::thrift::reflection::local::TypeSpec* OneOfEach::local_reflection = 
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC;

uint32_t OneOfEach::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_true);
          this->__isset.im_true = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->im_false);
          this->__isset.im_false = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_bite);
          this->__isset.a_bite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->integer16);
          this->__isset.integer16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->integer32);
          this->__isset.integer32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->integer64);
          this->__isset.integer64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_precision);
          this->__isset.double_precision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->some_characters);
          this->__isset.some_characters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zomg_unicode);
          this->__isset.zomg_unicode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->what_who);
          this->__isset.what_who = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->base64);
          this->__isset.base64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->byte_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->byte_list[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->i16_list.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI16(this->i16_list[_i9]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            iprot->readListBegin(_etype13, _size10);
            this->i64_list.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->i64_list[_i14]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneOfEach::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OneOfEach");
  xfer += oprot->writeFieldBegin("im_true", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->im_true);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("im_false", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->im_false);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_bite", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->a_bite);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->integer16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->integer32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("integer64", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->integer64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_precision", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->double_precision);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("some_characters", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->some_characters);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zomg_unicode", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->zomg_unicode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("what_who", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->what_who);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("base64", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeBinary(this->base64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->byte_list.size()));
    std::vector<int8_t> ::const_iterator _iter15;
    for (_iter15 = this->byte_list.begin(); _iter15 != this->byte_list.end(); ++_iter15)
    {
      xfer += oprot->writeByte((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->i16_list.size()));
    std::vector<int16_t> ::const_iterator _iter16;
    for (_iter16 = this->i16_list.begin(); _iter16 != this->i16_list.end(); ++_iter16)
    {
      xfer += oprot->writeI16((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_list.size()));
    std::vector<int64_t> ::const_iterator _iter17;
    for (_iter17 = this->i64_list.begin(); _iter17 != this->i64_list.end(); ++_iter17)
    {
      xfer += oprot->writeI64((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bonk::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Bonk::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3(
  ::apache::thrift::protocol::T_STRUCT,
  Bonk::binary_fingerprint,
  trlo_metas_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  trlo_specs_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3);

::apache::thrift::reflection::local::TypeSpec* Bonk::local_reflection = 
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3;

uint32_t Bonk::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bonk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bonk");
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Nesting::ascii_fingerprint = "9D961D015265DA7A88BA69FB2A7ACDA9";
const uint8_t Nesting::binary_fingerprint[16] = {0x9D,0x96,0x1D,0x01,0x52,0x65,0xDA,0x7A,0x88,0xBA,0x69,0xFB,0x2A,0x7A,0xCD,0xA9};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9[] = {
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:i32;2:string;};2:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9(
  ::apache::thrift::protocol::T_STRUCT,
  Nesting::binary_fingerprint,
  trlo_metas_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9,
  trlo_specs_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9);

::apache::thrift::reflection::local::TypeSpec* Nesting::local_reflection = 
  &trlo_typespec_DebugProtoTest_9D961D015265DA7A88BA69FB2A7ACDA9;

uint32_t Nesting::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_bonk.read(iprot);
          this->__isset.my_bonk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->my_ooe.read(iprot);
          this->__isset.my_ooe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Nesting::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Nesting");
  xfer += oprot->writeFieldBegin("my_bonk", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->my_bonk.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("my_ooe", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->my_ooe.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* HolyMoley::ascii_fingerprint = "63B6C93A44D5393BB40AF7623EA1919F";
const uint8_t HolyMoley::binary_fingerprint[16] = {0x63,0xB6,0xC9,0x3A,0x44,0xD5,0x39,0x3B,0xB4,0x0A,0xF7,0x62,0x3E,0xA1,0x91,0x9F};

// list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  NULL);

// list<string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<list<string>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  NULL);

// list<{1:i32;2:string;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_3F5FC93B338687BC7235B1AB103F47B3,
  NULL);

// map<string,list<{1:i32;2:string;}>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_55CEEE2B7ABA3A0ADE97E724FAFAB31A);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F[] = {
  &trlo_typespec_DebugProtoTest_EFF35C55709151D6F9BA209210A64A9A,
  &trlo_typespec_DebugProtoTest_08B77EFB81A30DD0849F03CD371B217F,
  &trlo_typespec_DebugProtoTest_7D09D9AA976355FEB241190785C6DBFD,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;}>;2:set<list<string>>;3:map<string,list<{1:i32;2:string;}>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F(
  ::apache::thrift::protocol::T_STRUCT,
  HolyMoley::binary_fingerprint,
  trlo_metas_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F,
  trlo_specs_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F);

::apache::thrift::reflection::local::TypeSpec* HolyMoley::local_reflection = 
  &trlo_typespec_DebugProtoTest_63B6C93A44D5393BB40AF7623EA1919F;

uint32_t HolyMoley::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->big.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            iprot->readListBegin(_etype21, _size18);
            this->big.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->big[_i22].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.big = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->contain.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            iprot->readSetBegin(_etype26, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::vector<std::string>  _elem28;
              {
                _elem28.clear();
                uint32_t _size29;
                ::apache::thrift::protocol::TType _etype32;
                iprot->readListBegin(_etype32, _size29);
                _elem28.resize(_size29);
                uint32_t _i33;
                for (_i33 = 0; _i33 < _size29; ++_i33)
                {
                  xfer += iprot->readString(_elem28[_i33]);
                }
                iprot->readListEnd();
              }
              this->contain.insert(_elem28);
            }
            iprot->readSetEnd();
          }
          this->__isset.contain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bonks.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _ktype35;
            ::apache::thrift::protocol::TType _vtype36;
            iprot->readMapBegin(_ktype35, _vtype36, _size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              std::string _key39;
              xfer += iprot->readString(_key39);
              std::vector<Bonk> & _val40 = this->bonks[_key39];
              {
                _val40.clear();
                uint32_t _size41;
                ::apache::thrift::protocol::TType _etype44;
                iprot->readListBegin(_etype44, _size41);
                _val40.resize(_size41);
                uint32_t _i45;
                for (_i45 = 0; _i45 < _size41; ++_i45)
                {
                  xfer += _val40[_i45].read(iprot);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.bonks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HolyMoley::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HolyMoley");
  xfer += oprot->writeFieldBegin("big", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->big.size()));
    std::vector<OneOfEach> ::const_iterator _iter46;
    for (_iter46 = this->big.begin(); _iter46 != this->big.end(); ++_iter46)
    {
      xfer += (*_iter46).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("contain", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->contain.size()));
    std::set<std::vector<std::string> > ::const_iterator _iter47;
    for (_iter47 = this->contain.begin(); _iter47 != this->contain.end(); ++_iter47)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter47).size()));
        std::vector<std::string> ::const_iterator _iter48;
        for (_iter48 = (*_iter47).begin(); _iter48 != (*_iter47).end(); ++_iter48)
        {
          xfer += oprot->writeString((*_iter48));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bonks", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->bonks.size()));
    std::map<std::string, std::vector<Bonk> > ::const_iterator _iter49;
    for (_iter49 = this->bonks.begin(); _iter49 != this->bonks.end(); ++_iter49)
    {
      xfer += oprot->writeString(_iter49->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter49->second.size()));
        std::vector<Bonk> ::const_iterator _iter50;
        for (_iter50 = _iter49->second.begin(); _iter50 != _iter49->second.end(); ++_iter50)
        {
          xfer += (*_iter50).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Backwards::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t Backwards::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3(
  ::apache::thrift::protocol::T_STRUCT,
  Backwards::binary_fingerprint,
  trlo_metas_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3,
  trlo_specs_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3);

::apache::thrift::reflection::local::TypeSpec* Backwards::local_reflection = 
  &trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3;

uint32_t Backwards::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_tag2);
          this->__isset.first_tag2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_tag1);
          this->__isset.second_tag1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Backwards::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Backwards");
  xfer += oprot->writeFieldBegin("second_tag1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->second_tag1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("first_tag2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->first_tag2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Empty::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t Empty::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B[] = {
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B(
  ::apache::thrift::protocol::T_STRUCT,
  Empty::binary_fingerprint,
  trlo_metas_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  trlo_specs_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B);

::apache::thrift::reflection::local::TypeSpec* Empty::local_reflection = 
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B;

uint32_t Empty::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Empty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Empty");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Wrapper::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t Wrapper::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD[] = {
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD(
  ::apache::thrift::protocol::T_STRUCT,
  Wrapper::binary_fingerprint,
  trlo_metas_DebugProtoTest_2C32A565725135A023CB591D1A993CFD,
  trlo_specs_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

::apache::thrift::reflection::local::TypeSpec* Wrapper::local_reflection = 
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD;

uint32_t Wrapper::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->foo.read(iprot);
          this->__isset.foo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Wrapper::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Wrapper");
  xfer += oprot->writeFieldBegin("foo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->foo.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RandomStuff::ascii_fingerprint = "8E3A2E54E7FBB5A4EA75EC85E71FE8BE";
const uint8_t RandomStuff::binary_fingerprint[16] = {0x8E,0x3A,0x2E,0x54,0xE7,0xFB,0xB5,0xA4,0xEA,0x75,0xEC,0x85,0xE7,0x1F,0xE8,0xBE};

// list<i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// map<i32,{1:{};}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_2C32A565725135A023CB591D1A993CFD);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_009536FB14D08A80EAAB3A13751B902E,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE(
  ::apache::thrift::protocol::T_STRUCT,
  RandomStuff::binary_fingerprint,
  trlo_metas_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE,
  trlo_specs_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE);

::apache::thrift::reflection::local::TypeSpec* RandomStuff::local_reflection = 
  &trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE;

uint32_t RandomStuff::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->myintlist.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            iprot->readListBegin(_etype54, _size51);
            this->myintlist.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += iprot->readI32(this->myintlist[_i55]);
            }
            iprot->readListEnd();
          }
          this->__isset.myintlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->maps.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _ktype57;
            ::apache::thrift::protocol::TType _vtype58;
            iprot->readMapBegin(_ktype57, _vtype58, _size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              int32_t _key61;
              xfer += iprot->readI32(_key61);
              Wrapper& _val62 = this->maps[_key61];
              xfer += _val62.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.maps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bigint);
          this->__isset.bigint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->triple);
          this->__isset.triple = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RandomStuff::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RandomStuff");
  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->b);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("c", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->c);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->d);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("myintlist", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->myintlist.size()));
    std::vector<int32_t> ::const_iterator _iter63;
    for (_iter63 = this->myintlist.begin(); _iter63 != this->myintlist.end(); ++_iter63)
    {
      xfer += oprot->writeI32((*_iter63));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maps", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->maps.size()));
    std::map<int32_t, Wrapper> ::const_iterator _iter64;
    for (_iter64 = this->maps.begin(); _iter64 != this->maps.end(); ++_iter64)
    {
      xfer += oprot->writeI32(_iter64->first);
      xfer += _iter64->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bigint", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->bigint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("triple", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->triple);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Base64::ascii_fingerprint = "D6983CD9C5C18EAC36C957E4BED331AE";
const uint8_t Base64::binary_fingerprint[16] = {0xD6,0x98,0x3C,0xD9,0xC5,0xC1,0x8E,0xAC,0x36,0xC9,0x57,0xE4,0xBE,0xD3,0x31,0xAE};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;3:string;4:string;5:string;6:string;7:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE(
  ::apache::thrift::protocol::T_STRUCT,
  Base64::binary_fingerprint,
  trlo_metas_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE,
  trlo_specs_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE);

::apache::thrift::reflection::local::TypeSpec* Base64::local_reflection = 
  &trlo_typespec_DebugProtoTest_D6983CD9C5C18EAC36C957E4BED331AE;

uint32_t Base64::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b1);
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b2);
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b3);
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b4);
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b5);
          this->__isset.b5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->b6);
          this->__isset.b6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Base64::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Base64");
  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->a);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b1", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->b1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->b2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->b3);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->b4);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b5", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->b5);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b6", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->b6);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CompactProtoTestStruct::ascii_fingerprint = "FECB06442E1E082EBF36FB8CB75EB414";
const uint8_t CompactProtoTestStruct::binary_fingerprint[16] = {0xFE,0xCB,0x06,0x44,0x2E,0x1E,0x08,0x2E,0xBF,0x36,0xFB,0x8C,0xB7,0x5E,0xB4,0x14};

// list<double>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// list<bool>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// list<{}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// set<byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  NULL);

// set<i16>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  NULL);

// set<i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  NULL);

// set<i64>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  NULL);

// set<double>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  NULL);

// set<string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

// set<bool>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  NULL);

// set<{}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  NULL);

// map<byte,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i16,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i32,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<i64,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<double,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<string,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<bool,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,i16>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5);

// map<byte,i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A);

// map<byte,i64>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44);

// map<byte,double>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0);

// map<byte,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// map<byte,bool>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305);

// map<list<byte>,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<set<byte>,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<map<byte,byte>,byte>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091);

// map<byte,map<byte,byte>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C);

// map<byte,set<byte>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485);

// map<byte,list<byte>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 9, false },
  { 10, false },
  { 11, false },
  { 12, false },
  { 13, false },
  { 14, false },
  { 15, false },
  { 16, false },
  { 17, false },
  { 18, false },
  { 19, false },
  { 20, false },
  { 21, false },
  { 22, false },
  { 23, false },
  { 24, false },
  { 25, false },
  { 26, false },
  { 27, false },
  { 28, false },
  { 29, false },
  { 30, false },
  { 31, false },
  { 32, false },
  { 33, false },
  { 34, false },
  { 35, false },
  { 36, false },
  { 37, false },
  { 38, false },
  { 39, false },
  { 40, false },
  { 41, false },
  { 42, false },
  { 43, false },
  { 44, false },
  { 45, false },
  { 46, false },
  { 47, false },
  { 48, false },
  { 49, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414[] = {
  &trlo_typespec_DebugProtoTest_40EA57D3EE3C07BF1C102B466E1C3091,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_DebugProtoTest_99914B932BD37A50B983C5E7C90AE93B,
  &trlo_typespec_DebugProtoTest_AA4F7C56251CF3CFAEC27EFC595B8859,
  &trlo_typespec_DebugProtoTest_9FC1EE2443BBF82A274BA6CB6AEB0BC9,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_ED613BAC0B5A2A2EBDFC90ADB2CCF9F0,
  &trlo_typespec_DebugProtoTest_D6AEC7E93315AED6C2F228E4A906D442,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_DebugProtoTest_8E94B3B8D6C11F11416F407E0E5DD645,
  &trlo_typespec_DebugProtoTest_FC89DC9CFCE2B64549D834C7D524F4CE,
  &trlo_typespec_DebugProtoTest_941851E0D30D43A865F9A5B45701B485,
  &trlo_typespec_DebugProtoTest_D0694DB62562D95D51BB12FCE742233F,
  &trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_DebugProtoTest_6B9CCE9D3F24C3B56F679700AFE6F569,
  &trlo_typespec_DebugProtoTest_A57192399D0FE7565A6242260B4B2ED9,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_5B34865E3E09883456AB4096E5B3127A,
  &trlo_typespec_DebugProtoTest_01323420E628F4ADC6BA7DFCB543CB0F,
  &trlo_typespec_DebugProtoTest_21AD9E158C2172DB8799B91CD0E52582,
  &trlo_typespec_DebugProtoTest_92564D937E550F7CFDB650B571A4721C,
  &trlo_typespec_DebugProtoTest_171296C3BC146F62A7BA3343CA4EE758,
  &trlo_typespec_DebugProtoTest_AFB1B3ECD0A07CC6C181869B1A2FA60A,
  &trlo_typespec_DebugProtoTest_06818F6175A3915CF8C618F32212A451,
  &trlo_typespec_DebugProtoTest_E0E210CDABA8A38A3EFA5214AE908496,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_0D41768A12E3890E6FA94FED8184946D,
  &trlo_typespec_DebugProtoTest_A31ED0D47760FB26F56B4CCED43DA5EC,
  &trlo_typespec_DebugProtoTest_7C401D81BFB7A48121223E01303FC373,
  &trlo_typespec_DebugProtoTest_4B357CAA02423DEDB92F0D36BCB994B9,
  &trlo_typespec_DebugProtoTest_0C98DBB2DAB76A3702A0B4820E4800DD,
  &trlo_typespec_DebugProtoTest_228302BAFBF208C0A6C8F204B88DB3E1,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_BCDB1ABE8E71253720DC2E61CE96CF04,
  &trlo_typespec_DebugProtoTest_0A366525281FF13F319B1A7276C975DF,
  &trlo_typespec_DebugProtoTest_2AAE00BD36DB5899F2AA576353932BA2,
  &trlo_typespec_DebugProtoTest_8D6630E2281DCBB1D8BC2FD6D0347B36,
  &trlo_typespec_DebugProtoTest_8FF964EDC3CA1DB6C9EC28BF1836A5D2,
  &trlo_typespec_DebugProtoTest_C5BAEF94D938920BAAA1E4C93709AF82,
  &trlo_typespec_DebugProtoTest_684A6B988F32DBF57C6A1546CF441F21,
  &trlo_typespec_DebugProtoTest_E65AA5DC61F5EDBA963EB105CE3F813A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:byte;2:i16;3:i32;4:i64;5:double;6:string;7:string;8:bool;9:bool;10:{};11:list<byte>;12:list<i16>;13:list<i32>;14:list<i64>;15:list<double>;16:list<string>;17:list<string>;18:list<bool>;19:list<{}>;20:set<byte>;21:set<i16>;22:set<i32>;23:set<i64>;24:set<double>;25:set<string>;26:set<string>;27:set<bool>;28:set<{}>;29:map<byte,byte>;30:map<i16,byte>;31:map<i32,byte>;32:map<i64,byte>;33:map<double,byte>;34:map<string,byte>;35:map<string,byte>;36:map<bool,byte>;37:map<byte,i16>;38:map<byte,i32>;39:map<byte,i64>;40:map<byte,double>;41:map<byte,string>;42:map<byte,string>;43:map<byte,bool>;44:map<list<byte>,byte>;45:map<set<byte>,byte>;46:map<map<byte,byte>,byte>;47:map<byte,map<byte,byte>>;48:map<byte,set<byte>>;49:map<byte,list<byte>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414(
  ::apache::thrift::protocol::T_STRUCT,
  CompactProtoTestStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414,
  trlo_specs_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414);

::apache::thrift::reflection::local::TypeSpec* CompactProtoTestStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_FECB06442E1E082EBF36FB8CB75EB414;

uint32_t CompactProtoTestStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->a_byte);
          this->__isset.a_byte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->a_i16);
          this->__isset.a_i16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a_i32);
          this->__isset.a_i32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->a_i64);
          this->__isset.a_i64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a_double);
          this->__isset.a_double = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a_string);
          this->__isset.a_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->a_binary);
          this->__isset.a_binary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->true_field);
          this->__isset.true_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->false_field);
          this->__isset.false_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->empty_struct_field.read(iprot);
          this->__isset.empty_struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->byte_list.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            iprot->readListBegin(_etype68, _size65);
            this->byte_list.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readByte(this->byte_list[_i69]);
            }
            iprot->readListEnd();
          }
          this->__isset.byte_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i16_list.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            iprot->readListBegin(_etype73, _size70);
            this->i16_list.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += iprot->readI16(this->i16_list[_i74]);
            }
            iprot->readListEnd();
          }
          this->__isset.i16_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i32_list.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            iprot->readListBegin(_etype78, _size75);
            this->i32_list.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += iprot->readI32(this->i32_list[_i79]);
            }
            iprot->readListEnd();
          }
          this->__isset.i32_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_list.clear();
            uint32_t _size80;
            ::apache::thrift::protocol::TType _etype83;
            iprot->readListBegin(_etype83, _size80);
            this->i64_list.resize(_size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              xfer += iprot->readI64(this->i64_list[_i84]);
            }
            iprot->readListEnd();
          }
          this->__isset.i64_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->double_list.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            iprot->readListBegin(_etype88, _size85);
            this->double_list.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += iprot->readDouble(this->double_list[_i89]);
            }
            iprot->readListEnd();
          }
          this->__isset.double_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->string_list.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            iprot->readListBegin(_etype93, _size90);
            this->string_list.resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += iprot->readString(this->string_list[_i94]);
            }
            iprot->readListEnd();
          }
          this->__isset.string_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->binary_list.clear();
            uint32_t _size95;
            ::apache::thrift::protocol::TType _etype98;
            iprot->readListBegin(_etype98, _size95);
            this->binary_list.resize(_size95);
            uint32_t _i99;
            for (_i99 = 0; _i99 < _size95; ++_i99)
            {
              xfer += iprot->readBinary(this->binary_list[_i99]);
            }
            iprot->readListEnd();
          }
          this->__isset.binary_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->boolean_list.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            iprot->readListBegin(_etype103, _size100);
            this->boolean_list.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += iprot->readBool(this->boolean_list[_i104]);
            }
            iprot->readListEnd();
          }
          this->__isset.boolean_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            iprot->readListBegin(_etype108, _size105);
            this->struct_list.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += this->struct_list[_i109].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->byte_set.clear();
            uint32_t _size110;
            ::apache::thrift::protocol::TType _etype113;
            iprot->readSetBegin(_etype113, _size110);
            uint32_t _i114;
            for (_i114 = 0; _i114 < _size110; ++_i114)
            {
              int8_t _elem115;
              xfer += iprot->readByte(_elem115);
              this->byte_set.insert(_elem115);
            }
            iprot->readSetEnd();
          }
          this->__isset.byte_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i16_set.clear();
            uint32_t _size116;
            ::apache::thrift::protocol::TType _etype119;
            iprot->readSetBegin(_etype119, _size116);
            uint32_t _i120;
            for (_i120 = 0; _i120 < _size116; ++_i120)
            {
              int16_t _elem121;
              xfer += iprot->readI16(_elem121);
              this->i16_set.insert(_elem121);
            }
            iprot->readSetEnd();
          }
          this->__isset.i16_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i32_set.clear();
            uint32_t _size122;
            ::apache::thrift::protocol::TType _etype125;
            iprot->readSetBegin(_etype125, _size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              int32_t _elem127;
              xfer += iprot->readI32(_elem127);
              this->i32_set.insert(_elem127);
            }
            iprot->readSetEnd();
          }
          this->__isset.i32_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i64_set.clear();
            uint32_t _size128;
            ::apache::thrift::protocol::TType _etype131;
            iprot->readSetBegin(_etype131, _size128);
            uint32_t _i132;
            for (_i132 = 0; _i132 < _size128; ++_i132)
            {
              int64_t _elem133;
              xfer += iprot->readI64(_elem133);
              this->i64_set.insert(_elem133);
            }
            iprot->readSetEnd();
          }
          this->__isset.i64_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->double_set.clear();
            uint32_t _size134;
            ::apache::thrift::protocol::TType _etype137;
            iprot->readSetBegin(_etype137, _size134);
            uint32_t _i138;
            for (_i138 = 0; _i138 < _size134; ++_i138)
            {
              double _elem139;
              xfer += iprot->readDouble(_elem139);
              this->double_set.insert(_elem139);
            }
            iprot->readSetEnd();
          }
          this->__isset.double_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->string_set.clear();
            uint32_t _size140;
            ::apache::thrift::protocol::TType _etype143;
            iprot->readSetBegin(_etype143, _size140);
            uint32_t _i144;
            for (_i144 = 0; _i144 < _size140; ++_i144)
            {
              std::string _elem145;
              xfer += iprot->readString(_elem145);
              this->string_set.insert(_elem145);
            }
            iprot->readSetEnd();
          }
          this->__isset.string_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->binary_set.clear();
            uint32_t _size146;
            ::apache::thrift::protocol::TType _etype149;
            iprot->readSetBegin(_etype149, _size146);
            uint32_t _i150;
            for (_i150 = 0; _i150 < _size146; ++_i150)
            {
              std::string _elem151;
              xfer += iprot->readBinary(_elem151);
              this->binary_set.insert(_elem151);
            }
            iprot->readSetEnd();
          }
          this->__isset.binary_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->boolean_set.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _etype155;
            iprot->readSetBegin(_etype155, _size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              bool _elem157;
              xfer += iprot->readBool(_elem157);
              this->boolean_set.insert(_elem157);
            }
            iprot->readSetEnd();
          }
          this->__isset.boolean_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->struct_set.clear();
            uint32_t _size158;
            ::apache::thrift::protocol::TType _etype161;
            iprot->readSetBegin(_etype161, _size158);
            uint32_t _i162;
            for (_i162 = 0; _i162 < _size158; ++_i162)
            {
              Empty _elem163;
              xfer += _elem163.read(iprot);
              this->struct_set.insert(_elem163);
            }
            iprot->readSetEnd();
          }
          this->__isset.struct_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_byte_map.clear();
            uint32_t _size164;
            ::apache::thrift::protocol::TType _ktype165;
            ::apache::thrift::protocol::TType _vtype166;
            iprot->readMapBegin(_ktype165, _vtype166, _size164);
            uint32_t _i168;
            for (_i168 = 0; _i168 < _size164; ++_i168)
            {
              int8_t _key169;
              xfer += iprot->readByte(_key169);
              int8_t& _val170 = this->byte_byte_map[_key169];
              xfer += iprot->readByte(_val170);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i16_byte_map.clear();
            uint32_t _size171;
            ::apache::thrift::protocol::TType _ktype172;
            ::apache::thrift::protocol::TType _vtype173;
            iprot->readMapBegin(_ktype172, _vtype173, _size171);
            uint32_t _i175;
            for (_i175 = 0; _i175 < _size171; ++_i175)
            {
              int16_t _key176;
              xfer += iprot->readI16(_key176);
              int8_t& _val177 = this->i16_byte_map[_key176];
              xfer += iprot->readByte(_val177);
            }
            iprot->readMapEnd();
          }
          this->__isset.i16_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i32_byte_map.clear();
            uint32_t _size178;
            ::apache::thrift::protocol::TType _ktype179;
            ::apache::thrift::protocol::TType _vtype180;
            iprot->readMapBegin(_ktype179, _vtype180, _size178);
            uint32_t _i182;
            for (_i182 = 0; _i182 < _size178; ++_i182)
            {
              int32_t _key183;
              xfer += iprot->readI32(_key183);
              int8_t& _val184 = this->i32_byte_map[_key183];
              xfer += iprot->readByte(_val184);
            }
            iprot->readMapEnd();
          }
          this->__isset.i32_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i64_byte_map.clear();
            uint32_t _size185;
            ::apache::thrift::protocol::TType _ktype186;
            ::apache::thrift::protocol::TType _vtype187;
            iprot->readMapBegin(_ktype186, _vtype187, _size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              int64_t _key190;
              xfer += iprot->readI64(_key190);
              int8_t& _val191 = this->i64_byte_map[_key190];
              xfer += iprot->readByte(_val191);
            }
            iprot->readMapEnd();
          }
          this->__isset.i64_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->double_byte_map.clear();
            uint32_t _size192;
            ::apache::thrift::protocol::TType _ktype193;
            ::apache::thrift::protocol::TType _vtype194;
            iprot->readMapBegin(_ktype193, _vtype194, _size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              double _key197;
              xfer += iprot->readDouble(_key197);
              int8_t& _val198 = this->double_byte_map[_key197];
              xfer += iprot->readByte(_val198);
            }
            iprot->readMapEnd();
          }
          this->__isset.double_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->string_byte_map.clear();
            uint32_t _size199;
            ::apache::thrift::protocol::TType _ktype200;
            ::apache::thrift::protocol::TType _vtype201;
            iprot->readMapBegin(_ktype200, _vtype201, _size199);
            uint32_t _i203;
            for (_i203 = 0; _i203 < _size199; ++_i203)
            {
              std::string _key204;
              xfer += iprot->readString(_key204);
              int8_t& _val205 = this->string_byte_map[_key204];
              xfer += iprot->readByte(_val205);
            }
            iprot->readMapEnd();
          }
          this->__isset.string_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->binary_byte_map.clear();
            uint32_t _size206;
            ::apache::thrift::protocol::TType _ktype207;
            ::apache::thrift::protocol::TType _vtype208;
            iprot->readMapBegin(_ktype207, _vtype208, _size206);
            uint32_t _i210;
            for (_i210 = 0; _i210 < _size206; ++_i210)
            {
              std::string _key211;
              xfer += iprot->readBinary(_key211);
              int8_t& _val212 = this->binary_byte_map[_key211];
              xfer += iprot->readByte(_val212);
            }
            iprot->readMapEnd();
          }
          this->__isset.binary_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->boolean_byte_map.clear();
            uint32_t _size213;
            ::apache::thrift::protocol::TType _ktype214;
            ::apache::thrift::protocol::TType _vtype215;
            iprot->readMapBegin(_ktype214, _vtype215, _size213);
            uint32_t _i217;
            for (_i217 = 0; _i217 < _size213; ++_i217)
            {
              bool _key218;
              xfer += iprot->readBool(_key218);
              int8_t& _val219 = this->boolean_byte_map[_key218];
              xfer += iprot->readByte(_val219);
            }
            iprot->readMapEnd();
          }
          this->__isset.boolean_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_i16_map.clear();
            uint32_t _size220;
            ::apache::thrift::protocol::TType _ktype221;
            ::apache::thrift::protocol::TType _vtype222;
            iprot->readMapBegin(_ktype221, _vtype222, _size220);
            uint32_t _i224;
            for (_i224 = 0; _i224 < _size220; ++_i224)
            {
              int8_t _key225;
              xfer += iprot->readByte(_key225);
              int16_t& _val226 = this->byte_i16_map[_key225];
              xfer += iprot->readI16(_val226);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i16_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_i32_map.clear();
            uint32_t _size227;
            ::apache::thrift::protocol::TType _ktype228;
            ::apache::thrift::protocol::TType _vtype229;
            iprot->readMapBegin(_ktype228, _vtype229, _size227);
            uint32_t _i231;
            for (_i231 = 0; _i231 < _size227; ++_i231)
            {
              int8_t _key232;
              xfer += iprot->readByte(_key232);
              int32_t& _val233 = this->byte_i32_map[_key232];
              xfer += iprot->readI32(_val233);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_i64_map.clear();
            uint32_t _size234;
            ::apache::thrift::protocol::TType _ktype235;
            ::apache::thrift::protocol::TType _vtype236;
            iprot->readMapBegin(_ktype235, _vtype236, _size234);
            uint32_t _i238;
            for (_i238 = 0; _i238 < _size234; ++_i238)
            {
              int8_t _key239;
              xfer += iprot->readByte(_key239);
              int64_t& _val240 = this->byte_i64_map[_key239];
              xfer += iprot->readI64(_val240);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_i64_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_double_map.clear();
            uint32_t _size241;
            ::apache::thrift::protocol::TType _ktype242;
            ::apache::thrift::protocol::TType _vtype243;
            iprot->readMapBegin(_ktype242, _vtype243, _size241);
            uint32_t _i245;
            for (_i245 = 0; _i245 < _size241; ++_i245)
            {
              int8_t _key246;
              xfer += iprot->readByte(_key246);
              double& _val247 = this->byte_double_map[_key246];
              xfer += iprot->readDouble(_val247);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_double_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_string_map.clear();
            uint32_t _size248;
            ::apache::thrift::protocol::TType _ktype249;
            ::apache::thrift::protocol::TType _vtype250;
            iprot->readMapBegin(_ktype249, _vtype250, _size248);
            uint32_t _i252;
            for (_i252 = 0; _i252 < _size248; ++_i252)
            {
              int8_t _key253;
              xfer += iprot->readByte(_key253);
              std::string& _val254 = this->byte_string_map[_key253];
              xfer += iprot->readString(_val254);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_string_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_binary_map.clear();
            uint32_t _size255;
            ::apache::thrift::protocol::TType _ktype256;
            ::apache::thrift::protocol::TType _vtype257;
            iprot->readMapBegin(_ktype256, _vtype257, _size255);
            uint32_t _i259;
            for (_i259 = 0; _i259 < _size255; ++_i259)
            {
              int8_t _key260;
              xfer += iprot->readByte(_key260);
              std::string& _val261 = this->byte_binary_map[_key260];
              xfer += iprot->readBinary(_val261);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_binary_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_boolean_map.clear();
            uint32_t _size262;
            ::apache::thrift::protocol::TType _ktype263;
            ::apache::thrift::protocol::TType _vtype264;
            iprot->readMapBegin(_ktype263, _vtype264, _size262);
            uint32_t _i266;
            for (_i266 = 0; _i266 < _size262; ++_i266)
            {
              int8_t _key267;
              xfer += iprot->readByte(_key267);
              bool& _val268 = this->byte_boolean_map[_key267];
              xfer += iprot->readBool(_val268);
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_boolean_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->list_byte_map.clear();
            uint32_t _size269;
            ::apache::thrift::protocol::TType _ktype270;
            ::apache::thrift::protocol::TType _vtype271;
            iprot->readMapBegin(_ktype270, _vtype271, _size269);
            uint32_t _i273;
            for (_i273 = 0; _i273 < _size269; ++_i273)
            {
              std::vector<int8_t>  _key274;
              {
                _key274.clear();
                uint32_t _size276;
                ::apache::thrift::protocol::TType _etype279;
                iprot->readListBegin(_etype279, _size276);
                _key274.resize(_size276);
                uint32_t _i280;
                for (_i280 = 0; _i280 < _size276; ++_i280)
                {
                  xfer += iprot->readByte(_key274[_i280]);
                }
                iprot->readListEnd();
              }
              int8_t& _val275 = this->list_byte_map[_key274];
              xfer += iprot->readByte(_val275);
            }
            iprot->readMapEnd();
          }
          this->__isset.list_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->set_byte_map.clear();
            uint32_t _size281;
            ::apache::thrift::protocol::TType _ktype282;
            ::apache::thrift::protocol::TType _vtype283;
            iprot->readMapBegin(_ktype282, _vtype283, _size281);
            uint32_t _i285;
            for (_i285 = 0; _i285 < _size281; ++_i285)
            {
              std::set<int8_t>  _key286;
              {
                _key286.clear();
                uint32_t _size288;
                ::apache::thrift::protocol::TType _etype291;
                iprot->readSetBegin(_etype291, _size288);
                uint32_t _i292;
                for (_i292 = 0; _i292 < _size288; ++_i292)
                {
                  int8_t _elem293;
                  xfer += iprot->readByte(_elem293);
                  _key286.insert(_elem293);
                }
                iprot->readSetEnd();
              }
              int8_t& _val287 = this->set_byte_map[_key286];
              xfer += iprot->readByte(_val287);
            }
            iprot->readMapEnd();
          }
          this->__isset.set_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->map_byte_map.clear();
            uint32_t _size294;
            ::apache::thrift::protocol::TType _ktype295;
            ::apache::thrift::protocol::TType _vtype296;
            iprot->readMapBegin(_ktype295, _vtype296, _size294);
            uint32_t _i298;
            for (_i298 = 0; _i298 < _size294; ++_i298)
            {
              std::map<int8_t, int8_t>  _key299;
              {
                _key299.clear();
                uint32_t _size301;
                ::apache::thrift::protocol::TType _ktype302;
                ::apache::thrift::protocol::TType _vtype303;
                iprot->readMapBegin(_ktype302, _vtype303, _size301);
                uint32_t _i305;
                for (_i305 = 0; _i305 < _size301; ++_i305)
                {
                  int8_t _key306;
                  xfer += iprot->readByte(_key306);
                  int8_t& _val307 = _key299[_key306];
                  xfer += iprot->readByte(_val307);
                }
                iprot->readMapEnd();
              }
              int8_t& _val300 = this->map_byte_map[_key299];
              xfer += iprot->readByte(_val300);
            }
            iprot->readMapEnd();
          }
          this->__isset.map_byte_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_map_map.clear();
            uint32_t _size308;
            ::apache::thrift::protocol::TType _ktype309;
            ::apache::thrift::protocol::TType _vtype310;
            iprot->readMapBegin(_ktype309, _vtype310, _size308);
            uint32_t _i312;
            for (_i312 = 0; _i312 < _size308; ++_i312)
            {
              int8_t _key313;
              xfer += iprot->readByte(_key313);
              std::map<int8_t, int8_t> & _val314 = this->byte_map_map[_key313];
              {
                _val314.clear();
                uint32_t _size315;
                ::apache::thrift::protocol::TType _ktype316;
                ::apache::thrift::protocol::TType _vtype317;
                iprot->readMapBegin(_ktype316, _vtype317, _size315);
                uint32_t _i319;
                for (_i319 = 0; _i319 < _size315; ++_i319)
                {
                  int8_t _key320;
                  xfer += iprot->readByte(_key320);
                  int8_t& _val321 = _val314[_key320];
                  xfer += iprot->readByte(_val321);
                }
                iprot->readMapEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_map_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_set_map.clear();
            uint32_t _size322;
            ::apache::thrift::protocol::TType _ktype323;
            ::apache::thrift::protocol::TType _vtype324;
            iprot->readMapBegin(_ktype323, _vtype324, _size322);
            uint32_t _i326;
            for (_i326 = 0; _i326 < _size322; ++_i326)
            {
              int8_t _key327;
              xfer += iprot->readByte(_key327);
              std::set<int8_t> & _val328 = this->byte_set_map[_key327];
              {
                _val328.clear();
                uint32_t _size329;
                ::apache::thrift::protocol::TType _etype332;
                iprot->readSetBegin(_etype332, _size329);
                uint32_t _i333;
                for (_i333 = 0; _i333 < _size329; ++_i333)
                {
                  int8_t _elem334;
                  xfer += iprot->readByte(_elem334);
                  _val328.insert(_elem334);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_set_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->byte_list_map.clear();
            uint32_t _size335;
            ::apache::thrift::protocol::TType _ktype336;
            ::apache::thrift::protocol::TType _vtype337;
            iprot->readMapBegin(_ktype336, _vtype337, _size335);
            uint32_t _i339;
            for (_i339 = 0; _i339 < _size335; ++_i339)
            {
              int8_t _key340;
              xfer += iprot->readByte(_key340);
              std::vector<int8_t> & _val341 = this->byte_list_map[_key340];
              {
                _val341.clear();
                uint32_t _size342;
                ::apache::thrift::protocol::TType _etype345;
                iprot->readListBegin(_etype345, _size342);
                _val341.resize(_size342);
                uint32_t _i346;
                for (_i346 = 0; _i346 < _size342; ++_i346)
                {
                  xfer += iprot->readByte(_val341[_i346]);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.byte_list_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompactProtoTestStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CompactProtoTestStruct");
  xfer += oprot->writeFieldBegin("a_byte", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->a_byte);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i16", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->a_i16);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i32", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->a_i32);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_i64", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->a_i64);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_double", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->a_double);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_string", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->a_string);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("a_binary", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->a_binary);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("true_field", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->true_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("false_field", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->false_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("empty_struct_field", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->empty_struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->byte_list.size()));
    std::vector<int8_t> ::const_iterator _iter347;
    for (_iter347 = this->byte_list.begin(); _iter347 != this->byte_list.end(); ++_iter347)
    {
      xfer += oprot->writeByte((*_iter347));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_list", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->i16_list.size()));
    std::vector<int16_t> ::const_iterator _iter348;
    for (_iter348 = this->i16_list.begin(); _iter348 != this->i16_list.end(); ++_iter348)
    {
      xfer += oprot->writeI16((*_iter348));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_list", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_list.size()));
    std::vector<int32_t> ::const_iterator _iter349;
    for (_iter349 = this->i32_list.begin(); _iter349 != this->i32_list.end(); ++_iter349)
    {
      xfer += oprot->writeI32((*_iter349));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_list", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_list.size()));
    std::vector<int64_t> ::const_iterator _iter350;
    for (_iter350 = this->i64_list.begin(); _iter350 != this->i64_list.end(); ++_iter350)
    {
      xfer += oprot->writeI64((*_iter350));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_list", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->double_list.size()));
    std::vector<double> ::const_iterator _iter351;
    for (_iter351 = this->double_list.begin(); _iter351 != this->double_list.end(); ++_iter351)
    {
      xfer += oprot->writeDouble((*_iter351));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_list", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->string_list.size()));
    std::vector<std::string> ::const_iterator _iter352;
    for (_iter352 = this->string_list.begin(); _iter352 != this->string_list.end(); ++_iter352)
    {
      xfer += oprot->writeString((*_iter352));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_list", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->binary_list.size()));
    std::vector<std::string> ::const_iterator _iter353;
    for (_iter353 = this->binary_list.begin(); _iter353 != this->binary_list.end(); ++_iter353)
    {
      xfer += oprot->writeBinary((*_iter353));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_list", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->boolean_list.size()));
    std::vector<bool> ::const_iterator _iter354;
    for (_iter354 = this->boolean_list.begin(); _iter354 != this->boolean_list.end(); ++_iter354)
    {
      xfer += oprot->writeBool((*_iter354));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->struct_list.size()));
    std::vector<Empty> ::const_iterator _iter355;
    for (_iter355 = this->struct_list.begin(); _iter355 != this->struct_list.end(); ++_iter355)
    {
      xfer += (*_iter355).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set", ::apache::thrift::protocol::T_SET, 20);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->byte_set.size()));
    std::set<int8_t> ::const_iterator _iter356;
    for (_iter356 = this->byte_set.begin(); _iter356 != this->byte_set.end(); ++_iter356)
    {
      xfer += oprot->writeByte((*_iter356));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_set", ::apache::thrift::protocol::T_SET, 21);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->i16_set.size()));
    std::set<int16_t> ::const_iterator _iter357;
    for (_iter357 = this->i16_set.begin(); _iter357 != this->i16_set.end(); ++_iter357)
    {
      xfer += oprot->writeI16((*_iter357));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_set", ::apache::thrift::protocol::T_SET, 22);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_set.size()));
    std::set<int32_t> ::const_iterator _iter358;
    for (_iter358 = this->i32_set.begin(); _iter358 != this->i32_set.end(); ++_iter358)
    {
      xfer += oprot->writeI32((*_iter358));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_set", ::apache::thrift::protocol::T_SET, 23);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_set.size()));
    std::set<int64_t> ::const_iterator _iter359;
    for (_iter359 = this->i64_set.begin(); _iter359 != this->i64_set.end(); ++_iter359)
    {
      xfer += oprot->writeI64((*_iter359));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_set", ::apache::thrift::protocol::T_SET, 24);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->double_set.size()));
    std::set<double> ::const_iterator _iter360;
    for (_iter360 = this->double_set.begin(); _iter360 != this->double_set.end(); ++_iter360)
    {
      xfer += oprot->writeDouble((*_iter360));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_set", ::apache::thrift::protocol::T_SET, 25);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->string_set.size()));
    std::set<std::string> ::const_iterator _iter361;
    for (_iter361 = this->string_set.begin(); _iter361 != this->string_set.end(); ++_iter361)
    {
      xfer += oprot->writeString((*_iter361));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_set", ::apache::thrift::protocol::T_SET, 26);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->binary_set.size()));
    std::set<std::string> ::const_iterator _iter362;
    for (_iter362 = this->binary_set.begin(); _iter362 != this->binary_set.end(); ++_iter362)
    {
      xfer += oprot->writeBinary((*_iter362));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_set", ::apache::thrift::protocol::T_SET, 27);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->boolean_set.size()));
    std::set<bool> ::const_iterator _iter363;
    for (_iter363 = this->boolean_set.begin(); _iter363 != this->boolean_set.end(); ++_iter363)
    {
      xfer += oprot->writeBool((*_iter363));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_set", ::apache::thrift::protocol::T_SET, 28);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->struct_set.size()));
    std::set<Empty> ::const_iterator _iter364;
    for (_iter364 = this->struct_set.begin(); _iter364 != this->struct_set.end(); ++_iter364)
    {
      xfer += (*_iter364).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_byte_map", ::apache::thrift::protocol::T_MAP, 29);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->byte_byte_map.size()));
    std::map<int8_t, int8_t> ::const_iterator _iter365;
    for (_iter365 = this->byte_byte_map.begin(); _iter365 != this->byte_byte_map.end(); ++_iter365)
    {
      xfer += oprot->writeByte(_iter365->first);
      xfer += oprot->writeByte(_iter365->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i16_byte_map", ::apache::thrift::protocol::T_MAP, 30);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I16, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->i16_byte_map.size()));
    std::map<int16_t, int8_t> ::const_iterator _iter366;
    for (_iter366 = this->i16_byte_map.begin(); _iter366 != this->i16_byte_map.end(); ++_iter366)
    {
      xfer += oprot->writeI16(_iter366->first);
      xfer += oprot->writeByte(_iter366->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_byte_map", ::apache::thrift::protocol::T_MAP, 31);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->i32_byte_map.size()));
    std::map<int32_t, int8_t> ::const_iterator _iter367;
    for (_iter367 = this->i32_byte_map.begin(); _iter367 != this->i32_byte_map.end(); ++_iter367)
    {
      xfer += oprot->writeI32(_iter367->first);
      xfer += oprot->writeByte(_iter367->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i64_byte_map", ::apache::thrift::protocol::T_MAP, 32);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->i64_byte_map.size()));
    std::map<int64_t, int8_t> ::const_iterator _iter368;
    for (_iter368 = this->i64_byte_map.begin(); _iter368 != this->i64_byte_map.end(); ++_iter368)
    {
      xfer += oprot->writeI64(_iter368->first);
      xfer += oprot->writeByte(_iter368->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("double_byte_map", ::apache::thrift::protocol::T_MAP, 33);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_DOUBLE, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->double_byte_map.size()));
    std::map<double, int8_t> ::const_iterator _iter369;
    for (_iter369 = this->double_byte_map.begin(); _iter369 != this->double_byte_map.end(); ++_iter369)
    {
      xfer += oprot->writeDouble(_iter369->first);
      xfer += oprot->writeByte(_iter369->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("string_byte_map", ::apache::thrift::protocol::T_MAP, 34);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->string_byte_map.size()));
    std::map<std::string, int8_t> ::const_iterator _iter370;
    for (_iter370 = this->string_byte_map.begin(); _iter370 != this->string_byte_map.end(); ++_iter370)
    {
      xfer += oprot->writeString(_iter370->first);
      xfer += oprot->writeByte(_iter370->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_byte_map", ::apache::thrift::protocol::T_MAP, 35);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->binary_byte_map.size()));
    std::map<std::string, int8_t> ::const_iterator _iter371;
    for (_iter371 = this->binary_byte_map.begin(); _iter371 != this->binary_byte_map.end(); ++_iter371)
    {
      xfer += oprot->writeBinary(_iter371->first);
      xfer += oprot->writeByte(_iter371->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("boolean_byte_map", ::apache::thrift::protocol::T_MAP, 36);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BOOL, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->boolean_byte_map.size()));
    std::map<bool, int8_t> ::const_iterator _iter372;
    for (_iter372 = this->boolean_byte_map.begin(); _iter372 != this->boolean_byte_map.end(); ++_iter372)
    {
      xfer += oprot->writeBool(_iter372->first);
      xfer += oprot->writeByte(_iter372->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i16_map", ::apache::thrift::protocol::T_MAP, 37);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->byte_i16_map.size()));
    std::map<int8_t, int16_t> ::const_iterator _iter373;
    for (_iter373 = this->byte_i16_map.begin(); _iter373 != this->byte_i16_map.end(); ++_iter373)
    {
      xfer += oprot->writeByte(_iter373->first);
      xfer += oprot->writeI16(_iter373->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i32_map", ::apache::thrift::protocol::T_MAP, 38);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->byte_i32_map.size()));
    std::map<int8_t, int32_t> ::const_iterator _iter374;
    for (_iter374 = this->byte_i32_map.begin(); _iter374 != this->byte_i32_map.end(); ++_iter374)
    {
      xfer += oprot->writeByte(_iter374->first);
      xfer += oprot->writeI32(_iter374->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_i64_map", ::apache::thrift::protocol::T_MAP, 39);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->byte_i64_map.size()));
    std::map<int8_t, int64_t> ::const_iterator _iter375;
    for (_iter375 = this->byte_i64_map.begin(); _iter375 != this->byte_i64_map.end(); ++_iter375)
    {
      xfer += oprot->writeByte(_iter375->first);
      xfer += oprot->writeI64(_iter375->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_double_map", ::apache::thrift::protocol::T_MAP, 40);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->byte_double_map.size()));
    std::map<int8_t, double> ::const_iterator _iter376;
    for (_iter376 = this->byte_double_map.begin(); _iter376 != this->byte_double_map.end(); ++_iter376)
    {
      xfer += oprot->writeByte(_iter376->first);
      xfer += oprot->writeDouble(_iter376->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_string_map", ::apache::thrift::protocol::T_MAP, 41);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->byte_string_map.size()));
    std::map<int8_t, std::string> ::const_iterator _iter377;
    for (_iter377 = this->byte_string_map.begin(); _iter377 != this->byte_string_map.end(); ++_iter377)
    {
      xfer += oprot->writeByte(_iter377->first);
      xfer += oprot->writeString(_iter377->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_binary_map", ::apache::thrift::protocol::T_MAP, 42);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->byte_binary_map.size()));
    std::map<int8_t, std::string> ::const_iterator _iter378;
    for (_iter378 = this->byte_binary_map.begin(); _iter378 != this->byte_binary_map.end(); ++_iter378)
    {
      xfer += oprot->writeByte(_iter378->first);
      xfer += oprot->writeBinary(_iter378->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_boolean_map", ::apache::thrift::protocol::T_MAP, 43);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->byte_boolean_map.size()));
    std::map<int8_t, bool> ::const_iterator _iter379;
    for (_iter379 = this->byte_boolean_map.begin(); _iter379 != this->byte_boolean_map.end(); ++_iter379)
    {
      xfer += oprot->writeByte(_iter379->first);
      xfer += oprot->writeBool(_iter379->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("list_byte_map", ::apache::thrift::protocol::T_MAP, 44);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->list_byte_map.size()));
    std::map<std::vector<int8_t> , int8_t> ::const_iterator _iter380;
    for (_iter380 = this->list_byte_map.begin(); _iter380 != this->list_byte_map.end(); ++_iter380)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(_iter380->first.size()));
        std::vector<int8_t> ::const_iterator _iter381;
        for (_iter381 = _iter380->first.begin(); _iter381 != _iter380->first.end(); ++_iter381)
        {
          xfer += oprot->writeByte((*_iter381));
        }
        xfer += oprot->writeListEnd();
      }
      xfer += oprot->writeByte(_iter380->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("set_byte_map", ::apache::thrift::protocol::T_MAP, 45);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_SET, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->set_byte_map.size()));
    std::map<std::set<int8_t> , int8_t> ::const_iterator _iter382;
    for (_iter382 = this->set_byte_map.begin(); _iter382 != this->set_byte_map.end(); ++_iter382)
    {
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(_iter382->first.size()));
        std::set<int8_t> ::const_iterator _iter383;
        for (_iter383 = _iter382->first.begin(); _iter383 != _iter382->first.end(); ++_iter383)
        {
          xfer += oprot->writeByte((*_iter383));
        }
        xfer += oprot->writeSetEnd();
      }
      xfer += oprot->writeByte(_iter382->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("map_byte_map", ::apache::thrift::protocol::T_MAP, 46);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_MAP, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->map_byte_map.size()));
    std::map<std::map<int8_t, int8_t> , int8_t> ::const_iterator _iter384;
    for (_iter384 = this->map_byte_map.begin(); _iter384 != this->map_byte_map.end(); ++_iter384)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(_iter384->first.size()));
        std::map<int8_t, int8_t> ::const_iterator _iter385;
        for (_iter385 = _iter384->first.begin(); _iter385 != _iter384->first.end(); ++_iter385)
        {
          xfer += oprot->writeByte(_iter385->first);
          xfer += oprot->writeByte(_iter385->second);
        }
        xfer += oprot->writeMapEnd();
      }
      xfer += oprot->writeByte(_iter384->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_map_map", ::apache::thrift::protocol::T_MAP, 47);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->byte_map_map.size()));
    std::map<int8_t, std::map<int8_t, int8_t> > ::const_iterator _iter386;
    for (_iter386 = this->byte_map_map.begin(); _iter386 != this->byte_map_map.end(); ++_iter386)
    {
      xfer += oprot->writeByte(_iter386->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(_iter386->second.size()));
        std::map<int8_t, int8_t> ::const_iterator _iter387;
        for (_iter387 = _iter386->second.begin(); _iter387 != _iter386->second.end(); ++_iter387)
        {
          xfer += oprot->writeByte(_iter387->first);
          xfer += oprot->writeByte(_iter387->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_set_map", ::apache::thrift::protocol::T_MAP, 48);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->byte_set_map.size()));
    std::map<int8_t, std::set<int8_t> > ::const_iterator _iter388;
    for (_iter388 = this->byte_set_map.begin(); _iter388 != this->byte_set_map.end(); ++_iter388)
    {
      xfer += oprot->writeByte(_iter388->first);
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(_iter388->second.size()));
        std::set<int8_t> ::const_iterator _iter389;
        for (_iter389 = _iter388->second.begin(); _iter389 != _iter388->second.end(); ++_iter389)
        {
          xfer += oprot->writeByte((*_iter389));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("byte_list_map", ::apache::thrift::protocol::T_MAP, 49);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->byte_list_map.size()));
    std::map<int8_t, std::vector<int8_t> > ::const_iterator _iter390;
    for (_iter390 = this->byte_list_map.begin(); _iter390 != this->byte_list_map.end(); ++_iter390)
    {
      xfer += oprot->writeByte(_iter390->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(_iter390->second.size()));
        std::vector<int8_t> ::const_iterator _iter391;
        for (_iter391 = _iter390->second.begin(); _iter391 != _iter390->second.end(); ++_iter391)
        {
          xfer += oprot->writeByte((*_iter391));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SingleMapTestStruct::ascii_fingerprint = "A1B22BA1EA8D0BB473B653537D9E88F8";
const uint8_t SingleMapTestStruct::binary_fingerprint[16] = {0xA1,0xB2,0x2B,0xA1,0xEA,0x8D,0x0B,0xB4,0x73,0xB6,0x53,0x53,0x7D,0x9E,0x88,0xF8};

// map<i32,i32>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8E2C3AB94930BFC8CED12D3BE36D046C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8[] = {
  &trlo_typespec_DebugProtoTest_8E2C3AB94930BFC8CED12D3BE36D046C,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<i32,i32>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8(
  ::apache::thrift::protocol::T_STRUCT,
  SingleMapTestStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8,
  trlo_specs_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8);

::apache::thrift::reflection::local::TypeSpec* SingleMapTestStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8;

uint32_t SingleMapTestStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_i32_map = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i32_map.clear();
            uint32_t _size392;
            ::apache::thrift::protocol::TType _ktype393;
            ::apache::thrift::protocol::TType _vtype394;
            iprot->readMapBegin(_ktype393, _vtype394, _size392);
            uint32_t _i396;
            for (_i396 = 0; _i396 < _size392; ++_i396)
            {
              int32_t _key397;
              xfer += iprot->readI32(_key397);
              int32_t& _val398 = this->i32_map[_key397];
              xfer += iprot->readI32(_val398);
            }
            iprot->readMapEnd();
          }
          isset_i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_i32_map)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SingleMapTestStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SingleMapTestStruct");
  xfer += oprot->writeFieldBegin("i32_map", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_map.size()));
    std::map<int32_t, int32_t> ::const_iterator _iter399;
    for (_iter399 = this->i32_map.begin(); _iter399 != this->i32_map.end(); ++_iter399)
    {
      xfer += oprot->writeI32(_iter399->first);
      xfer += oprot->writeI32(_iter399->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ExceptionWithAMap::ascii_fingerprint = "F7C641917C22B35AE581CCD54910B00D";
const uint8_t ExceptionWithAMap::binary_fingerprint[16] = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};

// map<string,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E525259F38EF383401EB0A958458F19C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_E525259F38EF383401EB0A958458F19C,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:map<string,string>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D(
  ::apache::thrift::protocol::T_STRUCT);

::apache::thrift::reflection::local::TypeSpec* ExceptionWithAMap::local_reflection = 
  &trlo_typespec_DebugProtoTest_F7C641917C22B35AE581CCD54910B00D;

uint32_t ExceptionWithAMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blah);
          this->__isset.blah = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->map_field.clear();
            uint32_t _size400;
            ::apache::thrift::protocol::TType _ktype401;
            ::apache::thrift::protocol::TType _vtype402;
            iprot->readMapBegin(_ktype401, _vtype402, _size400);
            uint32_t _i404;
            for (_i404 = 0; _i404 < _size400; ++_i404)
            {
              std::string _key405;
              xfer += iprot->readString(_key405);
              std::string& _val406 = this->map_field[_key405];
              xfer += iprot->readString(_val406);
            }
            iprot->readMapEnd();
          }
          this->__isset.map_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExceptionWithAMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExceptionWithAMap");
  xfer += oprot->writeFieldBegin("blah", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->blah);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("map_field", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->map_field.size()));
    std::map<std::string, std::string> ::const_iterator _iter407;
    for (_iter407 = this->map_field.begin(); _iter407 != this->map_field.end(); ++_iter407)
    {
      xfer += oprot->writeString(_iter407->first);
      xfer += oprot->writeString(_iter407->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlowUp::ascii_fingerprint = "C31E40A0D0B3CC76A374729E31FB848F";
const uint8_t BlowUp::binary_fingerprint[16] = {0xC3,0x1E,0x40,0xA0,0xD0,0xB3,0xCC,0x76,0xA3,0x74,0x72,0x9E,0x31,0xFB,0x84,0x8F};

// map<i32,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21);

// set<map<i32,string>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37(
  ::apache::thrift::protocol::T_SET,
  &trlo_typespec_DebugProtoTest_6870A6B6F5D23566138BB497788EDCB9,
  NULL);

// map<list<i32>,set<map<i32,string>>>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_DebugProtoTest_088BFAA0A90D491A87F1AA2810C1FC6D,
  &trlo_typespec_DebugProtoTest_5C11F9C1DEA7D83F0F2A77015750AA37);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F[] = {
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_E100D6D4278D9E4BE53BFEF7E58A0B64,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<list<i32>,set<map<i32,string>>>;2:map<list<i32>,set<map<i32,string>>>;3:map<list<i32>,set<map<i32,string>>>;4:map<list<i32>,set<map<i32,string>>>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F(
  ::apache::thrift::protocol::T_STRUCT,
  BlowUp::binary_fingerprint,
  trlo_metas_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F,
  trlo_specs_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F);

::apache::thrift::reflection::local::TypeSpec* BlowUp::local_reflection = 
  &trlo_typespec_DebugProtoTest_C31E40A0D0B3CC76A374729E31FB848F;

uint32_t BlowUp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b1.clear();
            uint32_t _size408;
            ::apache::thrift::protocol::TType _ktype409;
            ::apache::thrift::protocol::TType _vtype410;
            iprot->readMapBegin(_ktype409, _vtype410, _size408);
            uint32_t _i412;
            for (_i412 = 0; _i412 < _size408; ++_i412)
            {
              std::vector<int32_t>  _key413;
              {
                _key413.clear();
                uint32_t _size415;
                ::apache::thrift::protocol::TType _etype418;
                iprot->readListBegin(_etype418, _size415);
                _key413.resize(_size415);
                uint32_t _i419;
                for (_i419 = 0; _i419 < _size415; ++_i419)
                {
                  xfer += iprot->readI32(_key413[_i419]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val414 = this->b1[_key413];
              {
                _val414.clear();
                uint32_t _size420;
                ::apache::thrift::protocol::TType _etype423;
                iprot->readSetBegin(_etype423, _size420);
                uint32_t _i424;
                for (_i424 = 0; _i424 < _size420; ++_i424)
                {
                  std::map<int32_t, std::string>  _elem425;
                  {
                    _elem425.clear();
                    uint32_t _size426;
                    ::apache::thrift::protocol::TType _ktype427;
                    ::apache::thrift::protocol::TType _vtype428;
                    iprot->readMapBegin(_ktype427, _vtype428, _size426);
                    uint32_t _i430;
                    for (_i430 = 0; _i430 < _size426; ++_i430)
                    {
                      int32_t _key431;
                      xfer += iprot->readI32(_key431);
                      std::string& _val432 = _elem425[_key431];
                      xfer += iprot->readString(_val432);
                    }
                    iprot->readMapEnd();
                  }
                  _val414.insert(_elem425);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b2.clear();
            uint32_t _size433;
            ::apache::thrift::protocol::TType _ktype434;
            ::apache::thrift::protocol::TType _vtype435;
            iprot->readMapBegin(_ktype434, _vtype435, _size433);
            uint32_t _i437;
            for (_i437 = 0; _i437 < _size433; ++_i437)
            {
              std::vector<int32_t>  _key438;
              {
                _key438.clear();
                uint32_t _size440;
                ::apache::thrift::protocol::TType _etype443;
                iprot->readListBegin(_etype443, _size440);
                _key438.resize(_size440);
                uint32_t _i444;
                for (_i444 = 0; _i444 < _size440; ++_i444)
                {
                  xfer += iprot->readI32(_key438[_i444]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val439 = this->b2[_key438];
              {
                _val439.clear();
                uint32_t _size445;
                ::apache::thrift::protocol::TType _etype448;
                iprot->readSetBegin(_etype448, _size445);
                uint32_t _i449;
                for (_i449 = 0; _i449 < _size445; ++_i449)
                {
                  std::map<int32_t, std::string>  _elem450;
                  {
                    _elem450.clear();
                    uint32_t _size451;
                    ::apache::thrift::protocol::TType _ktype452;
                    ::apache::thrift::protocol::TType _vtype453;
                    iprot->readMapBegin(_ktype452, _vtype453, _size451);
                    uint32_t _i455;
                    for (_i455 = 0; _i455 < _size451; ++_i455)
                    {
                      int32_t _key456;
                      xfer += iprot->readI32(_key456);
                      std::string& _val457 = _elem450[_key456];
                      xfer += iprot->readString(_val457);
                    }
                    iprot->readMapEnd();
                  }
                  _val439.insert(_elem450);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b3.clear();
            uint32_t _size458;
            ::apache::thrift::protocol::TType _ktype459;
            ::apache::thrift::protocol::TType _vtype460;
            iprot->readMapBegin(_ktype459, _vtype460, _size458);
            uint32_t _i462;
            for (_i462 = 0; _i462 < _size458; ++_i462)
            {
              std::vector<int32_t>  _key463;
              {
                _key463.clear();
                uint32_t _size465;
                ::apache::thrift::protocol::TType _etype468;
                iprot->readListBegin(_etype468, _size465);
                _key463.resize(_size465);
                uint32_t _i469;
                for (_i469 = 0; _i469 < _size465; ++_i469)
                {
                  xfer += iprot->readI32(_key463[_i469]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val464 = this->b3[_key463];
              {
                _val464.clear();
                uint32_t _size470;
                ::apache::thrift::protocol::TType _etype473;
                iprot->readSetBegin(_etype473, _size470);
                uint32_t _i474;
                for (_i474 = 0; _i474 < _size470; ++_i474)
                {
                  std::map<int32_t, std::string>  _elem475;
                  {
                    _elem475.clear();
                    uint32_t _size476;
                    ::apache::thrift::protocol::TType _ktype477;
                    ::apache::thrift::protocol::TType _vtype478;
                    iprot->readMapBegin(_ktype477, _vtype478, _size476);
                    uint32_t _i480;
                    for (_i480 = 0; _i480 < _size476; ++_i480)
                    {
                      int32_t _key481;
                      xfer += iprot->readI32(_key481);
                      std::string& _val482 = _elem475[_key481];
                      xfer += iprot->readString(_val482);
                    }
                    iprot->readMapEnd();
                  }
                  _val464.insert(_elem475);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->b4.clear();
            uint32_t _size483;
            ::apache::thrift::protocol::TType _ktype484;
            ::apache::thrift::protocol::TType _vtype485;
            iprot->readMapBegin(_ktype484, _vtype485, _size483);
            uint32_t _i487;
            for (_i487 = 0; _i487 < _size483; ++_i487)
            {
              std::vector<int32_t>  _key488;
              {
                _key488.clear();
                uint32_t _size490;
                ::apache::thrift::protocol::TType _etype493;
                iprot->readListBegin(_etype493, _size490);
                _key488.resize(_size490);
                uint32_t _i494;
                for (_i494 = 0; _i494 < _size490; ++_i494)
                {
                  xfer += iprot->readI32(_key488[_i494]);
                }
                iprot->readListEnd();
              }
              std::set<std::map<int32_t, std::string> > & _val489 = this->b4[_key488];
              {
                _val489.clear();
                uint32_t _size495;
                ::apache::thrift::protocol::TType _etype498;
                iprot->readSetBegin(_etype498, _size495);
                uint32_t _i499;
                for (_i499 = 0; _i499 < _size495; ++_i499)
                {
                  std::map<int32_t, std::string>  _elem500;
                  {
                    _elem500.clear();
                    uint32_t _size501;
                    ::apache::thrift::protocol::TType _ktype502;
                    ::apache::thrift::protocol::TType _vtype503;
                    iprot->readMapBegin(_ktype502, _vtype503, _size501);
                    uint32_t _i505;
                    for (_i505 = 0; _i505 < _size501; ++_i505)
                    {
                      int32_t _key506;
                      xfer += iprot->readI32(_key506);
                      std::string& _val507 = _elem500[_key506];
                      xfer += iprot->readString(_val507);
                    }
                    iprot->readMapEnd();
                  }
                  _val489.insert(_elem500);
                }
                iprot->readSetEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.b4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlowUp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlowUp");
  xfer += oprot->writeFieldBegin("b1", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->b1.size()));
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter508;
    for (_iter508 = this->b1.begin(); _iter508 != this->b1.end(); ++_iter508)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter508->first.size()));
        std::vector<int32_t> ::const_iterator _iter509;
        for (_iter509 = _iter508->first.begin(); _iter509 != _iter508->first.end(); ++_iter509)
        {
          xfer += oprot->writeI32((*_iter509));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(_iter508->second.size()));
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter510;
        for (_iter510 = _iter508->second.begin(); _iter510 != _iter508->second.end(); ++_iter510)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter510).size()));
            std::map<int32_t, std::string> ::const_iterator _iter511;
            for (_iter511 = (*_iter510).begin(); _iter511 != (*_iter510).end(); ++_iter511)
            {
              xfer += oprot->writeI32(_iter511->first);
              xfer += oprot->writeString(_iter511->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b2", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->b2.size()));
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter512;
    for (_iter512 = this->b2.begin(); _iter512 != this->b2.end(); ++_iter512)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter512->first.size()));
        std::vector<int32_t> ::const_iterator _iter513;
        for (_iter513 = _iter512->first.begin(); _iter513 != _iter512->first.end(); ++_iter513)
        {
          xfer += oprot->writeI32((*_iter513));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(_iter512->second.size()));
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter514;
        for (_iter514 = _iter512->second.begin(); _iter514 != _iter512->second.end(); ++_iter514)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter514).size()));
            std::map<int32_t, std::string> ::const_iterator _iter515;
            for (_iter515 = (*_iter514).begin(); _iter515 != (*_iter514).end(); ++_iter515)
            {
              xfer += oprot->writeI32(_iter515->first);
              xfer += oprot->writeString(_iter515->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b3", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->b3.size()));
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter516;
    for (_iter516 = this->b3.begin(); _iter516 != this->b3.end(); ++_iter516)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter516->first.size()));
        std::vector<int32_t> ::const_iterator _iter517;
        for (_iter517 = _iter516->first.begin(); _iter517 != _iter516->first.end(); ++_iter517)
        {
          xfer += oprot->writeI32((*_iter517));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(_iter516->second.size()));
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter518;
        for (_iter518 = _iter516->second.begin(); _iter518 != _iter516->second.end(); ++_iter518)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter518).size()));
            std::map<int32_t, std::string> ::const_iterator _iter519;
            for (_iter519 = (*_iter518).begin(); _iter519 != (*_iter518).end(); ++_iter519)
            {
              xfer += oprot->writeI32(_iter519->first);
              xfer += oprot->writeString(_iter519->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("b4", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->b4.size()));
    std::map<std::vector<int32_t> , std::set<std::map<int32_t, std::string> > > ::const_iterator _iter520;
    for (_iter520 = this->b4.begin(); _iter520 != this->b4.end(); ++_iter520)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter520->first.size()));
        std::vector<int32_t> ::const_iterator _iter521;
        for (_iter521 = _iter520->first.begin(); _iter521 != _iter520->first.end(); ++_iter521)
        {
          xfer += oprot->writeI32((*_iter521));
        }
        xfer += oprot->writeListEnd();
      }
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(_iter520->second.size()));
        std::set<std::map<int32_t, std::string> > ::const_iterator _iter522;
        for (_iter522 = _iter520->second.begin(); _iter522 != _iter520->second.end(); ++_iter522)
        {
          {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter522).size()));
            std::map<int32_t, std::string> ::const_iterator _iter523;
            for (_iter523 = (*_iter522).begin(); _iter523 != (*_iter522).end(); ++_iter523)
            {
              xfer += oprot->writeI32(_iter523->first);
              xfer += oprot->writeString(_iter523->second);
            }
            xfer += oprot->writeMapEnd();
          }
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ReverseOrderStruct::ascii_fingerprint = "BA93DC8E0310101D81517021CB327269";
const uint8_t ReverseOrderStruct::binary_fingerprint[16] = {0xBA,0x93,0xDC,0x8E,0x03,0x10,0x10,0x1D,0x81,0x51,0x70,0x21,0xCB,0x32,0x72,0x69};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_BA93DC8E0310101D81517021CB327269[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_BA93DC8E0310101D81517021CB327269[] = {
  &trlo_typespec_DebugProtoTest_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_2655F23011F3FE4C7C3D757D37D5F9A5,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i64;2:i32;3:i16;4:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_BA93DC8E0310101D81517021CB327269(
  ::apache::thrift::protocol::T_STRUCT,
  ReverseOrderStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_BA93DC8E0310101D81517021CB327269,
  trlo_specs_DebugProtoTest_BA93DC8E0310101D81517021CB327269);

::apache::thrift::reflection::local::TypeSpec* ReverseOrderStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_BA93DC8E0310101D81517021CB327269;

uint32_t ReverseOrderStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->first);
          this->__isset.first = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->second);
          this->__isset.second = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->third);
          this->__isset.third = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fourth);
          this->__isset.fourth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReverseOrderStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReverseOrderStruct");
  xfer += oprot->writeFieldBegin("fourth", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->fourth);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("third", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->third);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("second", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->second);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("first", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->first);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StructWithSomeEnum::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t StructWithSomeEnum::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA[] = {
  &trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:enum;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA(
  ::apache::thrift::protocol::T_STRUCT,
  StructWithSomeEnum::binary_fingerprint,
  trlo_metas_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA,
  trlo_specs_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA);

::apache::thrift::reflection::local::TypeSpec* StructWithSomeEnum::local_reflection = 
  &trlo_typespec_DebugProtoTest_8BBB3D0C3B370CB38F2D1340BB79F0AA;

uint32_t StructWithSomeEnum::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast524;
          xfer += iprot->readI32(ecast524);
          this->blah = (SomeEnum::type)ecast524;
          this->__isset.blah = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StructWithSomeEnum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StructWithSomeEnum");
  xfer += oprot->writeFieldBegin("blah", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->blah);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TestUnion::ascii_fingerprint = "ECF94F0ECE6E3DE6B834FAAF0F57F9D2";
const uint8_t TestUnion::binary_fingerprint[16] = {0xEC,0xF9,0x4F,0x0E,0xCE,0x6E,0x3D,0xE6,0xB8,0x34,0xFA,0xAF,0x0F,0x57,0xF9,0xD2};

// list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_3B817430713E83783602B9A6DEC628CA(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_DebugProtoTest_8E3A2E54E7FBB5A4EA75EC85E71FE8BE,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_ECF94F0ECE6E3DE6B834FAAF0F57F9D2[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_ECF94F0ECE6E3DE6B834FAAF0F57F9D2[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_3B817430713E83783602B9A6DEC628CA,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_DebugProtoTest_8E2C3AB94930BFC8CED12D3BE36D046C,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;7:set<i32>;8:map<i32,i32>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_ECF94F0ECE6E3DE6B834FAAF0F57F9D2(
  ::apache::thrift::protocol::T_STRUCT,
  TestUnion::binary_fingerprint,
  trlo_metas_DebugProtoTest_ECF94F0ECE6E3DE6B834FAAF0F57F9D2,
  trlo_specs_DebugProtoTest_ECF94F0ECE6E3DE6B834FAAF0F57F9D2);

::apache::thrift::reflection::local::TypeSpec* TestUnion::local_reflection = 
  &trlo_typespec_DebugProtoTest_ECF94F0ECE6E3DE6B834FAAF0F57F9D2;

uint32_t TestUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_field);
          this->__isset.string_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_field);
          this->__isset.i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->struct_field.read(iprot);
          this->__isset.struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size525;
            ::apache::thrift::protocol::TType _etype528;
            iprot->readListBegin(_etype528, _size525);
            this->struct_list.resize(_size525);
            uint32_t _i529;
            for (_i529 = 0; _i529 < _size525; ++_i529)
            {
              xfer += this->struct_list[_i529].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->other_i32_field);
          this->__isset.other_i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast530;
          xfer += iprot->readI32(ecast530);
          this->enum_field = (SomeEnum::type)ecast530;
          this->__isset.enum_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i32_set.clear();
            uint32_t _size531;
            ::apache::thrift::protocol::TType _etype534;
            iprot->readSetBegin(_etype534, _size531);
            uint32_t _i535;
            for (_i535 = 0; _i535 < _size531; ++_i535)
            {
              int32_t _elem536;
              xfer += iprot->readI32(_elem536);
              this->i32_set.insert(_elem536);
            }
            iprot->readSetEnd();
          }
          this->__isset.i32_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i32_map.clear();
            uint32_t _size537;
            ::apache::thrift::protocol::TType _ktype538;
            ::apache::thrift::protocol::TType _vtype539;
            iprot->readMapBegin(_ktype538, _vtype539, _size537);
            uint32_t _i541;
            for (_i541 = 0; _i541 < _size537; ++_i541)
            {
              int32_t _key542;
              xfer += iprot->readI32(_key542);
              int32_t& _val543 = this->i32_map[_key542];
              xfer += iprot->readI32(_val543);
            }
            iprot->readMapEnd();
          }
          this->__isset.i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TestUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TestUnion");
  xfer += oprot->writeFieldBegin("string_field", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_field", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_field", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->struct_list.size()));
    std::vector<RandomStuff> ::const_iterator _iter544;
    for (_iter544 = this->struct_list.begin(); _iter544 != this->struct_list.end(); ++_iter544)
    {
      xfer += (*_iter544).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("other_i32_field", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->other_i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("enum_field", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->enum_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_set", ::apache::thrift::protocol::T_SET, 7);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_set.size()));
    std::set<int32_t> ::const_iterator _iter545;
    for (_iter545 = this->i32_set.begin(); _iter545 != this->i32_set.end(); ++_iter545)
    {
      xfer += oprot->writeI32((*_iter545));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_map", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_map.size()));
    std::map<int32_t, int32_t> ::const_iterator _iter546;
    for (_iter546 = this->i32_map.begin(); _iter546 != this->i32_map.end(); ++_iter546)
    {
      xfer += oprot->writeI32(_iter546->first);
      xfer += oprot->writeI32(_iter546->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TestUnionMinusStringField::ascii_fingerprint = "7DE2104DA0F93A81734714CA2AAFBFB6";
const uint8_t TestUnionMinusStringField::binary_fingerprint[16] = {0x7D,0xE2,0x10,0x4D,0xA0,0xF9,0x3A,0x81,0x73,0x47,0x14,0xCA,0x2A,0xAF,0xBF,0xB6};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_7DE2104DA0F93A81734714CA2AAFBFB6[] = {
  { 2, false },
  { 3, false },
  { 4, false },
  { 5, false },
  { 6, false },
  { 7, false },
  { 8, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_7DE2104DA0F93A81734714CA2AAFBFB6[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DF7CE78394886179BFAFDB65C5A708BC,
  &trlo_typespec_DebugProtoTest_3B817430713E83783602B9A6DEC628CA,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_DebugProtoTest_698CD5CC80596EF059310FAB605A4491,
  &trlo_typespec_DebugProtoTest_8E2C3AB94930BFC8CED12D3BE36D046C,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;7:set<i32>;8:map<i32,i32>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_7DE2104DA0F93A81734714CA2AAFBFB6(
  ::apache::thrift::protocol::T_STRUCT,
  TestUnionMinusStringField::binary_fingerprint,
  trlo_metas_DebugProtoTest_7DE2104DA0F93A81734714CA2AAFBFB6,
  trlo_specs_DebugProtoTest_7DE2104DA0F93A81734714CA2AAFBFB6);

::apache::thrift::reflection::local::TypeSpec* TestUnionMinusStringField::local_reflection = 
  &trlo_typespec_DebugProtoTest_7DE2104DA0F93A81734714CA2AAFBFB6;

uint32_t TestUnionMinusStringField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_field);
          this->__isset.i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->struct_field.read(iprot);
          this->__isset.struct_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->struct_list.clear();
            uint32_t _size547;
            ::apache::thrift::protocol::TType _etype550;
            iprot->readListBegin(_etype550, _size547);
            this->struct_list.resize(_size547);
            uint32_t _i551;
            for (_i551 = 0; _i551 < _size547; ++_i551)
            {
              xfer += this->struct_list[_i551].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.struct_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->other_i32_field);
          this->__isset.other_i32_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast552;
          xfer += iprot->readI32(ecast552);
          this->enum_field = (SomeEnum::type)ecast552;
          this->__isset.enum_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->i32_set.clear();
            uint32_t _size553;
            ::apache::thrift::protocol::TType _etype556;
            iprot->readSetBegin(_etype556, _size553);
            uint32_t _i557;
            for (_i557 = 0; _i557 < _size553; ++_i557)
            {
              int32_t _elem558;
              xfer += iprot->readI32(_elem558);
              this->i32_set.insert(_elem558);
            }
            iprot->readSetEnd();
          }
          this->__isset.i32_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->i32_map.clear();
            uint32_t _size559;
            ::apache::thrift::protocol::TType _ktype560;
            ::apache::thrift::protocol::TType _vtype561;
            iprot->readMapBegin(_ktype560, _vtype561, _size559);
            uint32_t _i563;
            for (_i563 = 0; _i563 < _size559; ++_i563)
            {
              int32_t _key564;
              xfer += iprot->readI32(_key564);
              int32_t& _val565 = this->i32_map[_key564];
              xfer += iprot->readI32(_val565);
            }
            iprot->readMapEnd();
          }
          this->__isset.i32_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TestUnionMinusStringField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TestUnionMinusStringField");
  xfer += oprot->writeFieldBegin("i32_field", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_field", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->struct_field.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("struct_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->struct_list.size()));
    std::vector<RandomStuff> ::const_iterator _iter566;
    for (_iter566 = this->struct_list.begin(); _iter566 != this->struct_list.end(); ++_iter566)
    {
      xfer += (*_iter566).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("other_i32_field", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->other_i32_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("enum_field", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->enum_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_set", ::apache::thrift::protocol::T_SET, 7);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_set.size()));
    std::set<int32_t> ::const_iterator _iter567;
    for (_iter567 = this->i32_set.begin(); _iter567 != this->i32_set.end(); ++_iter567)
    {
      xfer += oprot->writeI32((*_iter567));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("i32_map", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_map.size()));
    std::map<int32_t, int32_t> ::const_iterator _iter568;
    for (_iter568 = this->i32_map.begin(); _iter568 != this->i32_map.end(); ++_iter568)
    {
      xfer += oprot->writeI32(_iter568->first);
      xfer += oprot->writeI32(_iter568->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ComparableUnion::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t ComparableUnion::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_07A9615F837F7D0A952B595DD3020972[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_07A9615F837F7D0A952B595DD3020972[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_07A9615F837F7D0A952B595DD3020972(
  ::apache::thrift::protocol::T_STRUCT,
  ComparableUnion::binary_fingerprint,
  trlo_metas_DebugProtoTest_07A9615F837F7D0A952B595DD3020972,
  trlo_specs_DebugProtoTest_07A9615F837F7D0A952B595DD3020972);

::apache::thrift::reflection::local::TypeSpec* ComparableUnion::local_reflection = 
  &trlo_typespec_DebugProtoTest_07A9615F837F7D0A952B595DD3020972;

uint32_t ComparableUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_field);
          this->__isset.string_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binary_field);
          this->__isset.binary_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComparableUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ComparableUnion");
  xfer += oprot->writeFieldBegin("string_field", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->string_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("binary_field", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->binary_field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StructWithAUnion::ascii_fingerprint = "0419D7286183CC25C4405EA80489A7DF";
const uint8_t StructWithAUnion::binary_fingerprint[16] = {0x04,0x19,0xD7,0x28,0x61,0x83,0xCC,0x25,0xC4,0x40,0x5E,0xA8,0x04,0x89,0xA7,0xDF};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_0419D7286183CC25C4405EA80489A7DF[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_0419D7286183CC25C4405EA80489A7DF[] = {
  &trlo_typespec_DebugProtoTest_ECF94F0ECE6E3DE6B834FAAF0F57F9D2,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:string;2:i32;3:{1:bool;2:bool;3:byte;4:i16;5:i32;6:i64;7:double;8:string;9:string;10:bool;11:string;12:list<byte>;13:list<i16>;14:list<i64>;};4:list<{1:i32;2:i32;3:i32;4:i32;5:list<i32>;6:map<i32,{1:{};}>;7:i64;8:double;}>;5:i32;6:enum;7:set<i32>;8:map<i32,i32>;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_0419D7286183CC25C4405EA80489A7DF(
  ::apache::thrift::protocol::T_STRUCT,
  StructWithAUnion::binary_fingerprint,
  trlo_metas_DebugProtoTest_0419D7286183CC25C4405EA80489A7DF,
  trlo_specs_DebugProtoTest_0419D7286183CC25C4405EA80489A7DF);

::apache::thrift::reflection::local::TypeSpec* StructWithAUnion::local_reflection = 
  &trlo_typespec_DebugProtoTest_0419D7286183CC25C4405EA80489A7DF;

uint32_t StructWithAUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->test_union.read(iprot);
          this->__isset.test_union = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StructWithAUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StructWithAUnion");
  xfer += oprot->writeFieldBegin("test_union", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->test_union.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* PrimitiveThenStruct::ascii_fingerprint = "B9601C7CD703F4F4C7ACF14F3E733CB6";
const uint8_t PrimitiveThenStruct::binary_fingerprint[16] = {0xB9,0x60,0x1C,0x7C,0xD7,0x03,0xF4,0xF4,0xC7,0xAC,0xF1,0x4F,0x3E,0x73,0x3C,0xB6};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_989D1F1AE8D148D5E2119FFEC4BBBEE3,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:i32;3:{1:i32;2:i32;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6(
  ::apache::thrift::protocol::T_STRUCT,
  PrimitiveThenStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6,
  trlo_specs_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6);

::apache::thrift::reflection::local::TypeSpec* PrimitiveThenStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_B9601C7CD703F4F4C7ACF14F3E733CB6;

uint32_t PrimitiveThenStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blah);
          this->__isset.blah = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blah2);
          this->__isset.blah2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bw.read(iprot);
          this->__isset.bw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrimitiveThenStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PrimitiveThenStruct");
  xfer += oprot->writeFieldBegin("blah", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->blah);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("blah2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->blah2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bw", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->bw.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StructWithASomemap::ascii_fingerprint = "A1B22BA1EA8D0BB473B653537D9E88F8";
const uint8_t StructWithASomemap::binary_fingerprint[16] = {0xA1,0xB2,0x2B,0xA1,0xEA,0x8D,0x0B,0xB4,0x73,0xB6,0x53,0x53,0x7D,0x9E,0x88,0xF8};

::apache::thrift::reflection::local::TypeSpec* StructWithASomemap::local_reflection = 
  &trlo_typespec_DebugProtoTest_A1B22BA1EA8D0BB473B653537D9E88F8;

uint32_t StructWithASomemap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_somemap_field = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->somemap_field.clear();
            uint32_t _size569;
            ::apache::thrift::protocol::TType _ktype570;
            ::apache::thrift::protocol::TType _vtype571;
            iprot->readMapBegin(_ktype570, _vtype571, _size569);
            uint32_t _i573;
            for (_i573 = 0; _i573 < _size569; ++_i573)
            {
              int32_t _key574;
              xfer += iprot->readI32(_key574);
              int32_t& _val575 = this->somemap_field[_key574];
              xfer += iprot->readI32(_val575);
            }
            iprot->readMapEnd();
          }
          isset_somemap_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_somemap_field)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StructWithASomemap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StructWithASomemap");
  xfer += oprot->writeFieldBegin("somemap_field", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->somemap_field.size()));
    std::map<int32_t, int32_t> ::const_iterator _iter576;
    for (_iter576 = this->somemap_field.begin(); _iter576 != this->somemap_field.end(); ++_iter576)
    {
      xfer += oprot->writeI32(_iter576->first);
      xfer += oprot->writeI32(_iter576->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BigFieldIdStruct::ascii_fingerprint = "EF3223317B4B691FF07BBCAE5AE4BE58";
const uint8_t BigFieldIdStruct::binary_fingerprint[16] = {0xEF,0x32,0x23,0x31,0x7B,0x4B,0x69,0x1F,0xF0,0x7B,0xBC,0xAE,0x5A,0xE4,0xBE,0x58};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58[] = {
  { 1, false },
  { 45, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;45:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58(
  ::apache::thrift::protocol::T_STRUCT,
  BigFieldIdStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58,
  trlo_specs_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58);

::apache::thrift::reflection::local::TypeSpec* BigFieldIdStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58;

uint32_t BigFieldIdStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BigFieldIdStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BigFieldIdStruct");
  xfer += oprot->writeFieldBegin("field1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("field2", ::apache::thrift::protocol::T_STRING, 45);
  xfer += oprot->writeString(this->field2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BreaksRubyCompactProtocol::ascii_fingerprint = "F8C71AB013693CB292A4A3589EB448B4";
const uint8_t BreaksRubyCompactProtocol::binary_fingerprint[16] = {0xF8,0xC7,0x1A,0xB0,0x13,0x69,0x3C,0xB2,0x92,0xA4,0xA3,0x58,0x9E,0xB4,0x48,0xB4};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4[] = {
  &trlo_typespec_DebugProtoTest_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_DebugProtoTest_EF3223317B4B691FF07BBCAE5AE4BE58,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:{1:string;45:string;};3:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4(
  ::apache::thrift::protocol::T_STRUCT,
  BreaksRubyCompactProtocol::binary_fingerprint,
  trlo_metas_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4,
  trlo_specs_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4);

::apache::thrift::reflection::local::TypeSpec* BreaksRubyCompactProtocol::local_reflection = 
  &trlo_typespec_DebugProtoTest_F8C71AB013693CB292A4A3589EB448B4;

uint32_t BreaksRubyCompactProtocol::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->field2.read(iprot);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BreaksRubyCompactProtocol::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BreaksRubyCompactProtocol");
  xfer += oprot->writeFieldBegin("field1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("field2", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->field2.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("field3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->field3);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TupleProtocolTestStruct::ascii_fingerprint = "445624EC1C1E048FBC1B0F8F5E0DE934";
const uint8_t TupleProtocolTestStruct::binary_fingerprint[16] = {0x44,0x56,0x24,0xEC,0x1C,0x1E,0x04,0x8F,0xBC,0x1B,0x0F,0x8F,0x5E,0x0D,0xE9,0x34};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_DebugProtoTest_445624EC1C1E048FBC1B0F8F5E0DE934[] = {
  { -12, true },
  { -11, true },
  { -10, true },
  { -9, true },
  { -8, true },
  { -7, true },
  { -6, true },
  { -5, true },
  { -4, true },
  { -3, true },
  { -2, true },
  { -1, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_DebugProtoTest_445624EC1C1E048FBC1B0F8F5E0DE934[] = {
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_DebugProtoTest_CAB8111FD0B710A336C898E539090E34,
};
// {-12:opt-i32;-11:opt-i32;-10:opt-i32;-9:opt-i32;-8:opt-i32;-7:opt-i32;-6:opt-i32;-5:opt-i32;-4:opt-i32;-3:opt-i32;-2:opt-i32;-1:opt-i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_DebugProtoTest_445624EC1C1E048FBC1B0F8F5E0DE934(
  ::apache::thrift::protocol::T_STRUCT,
  TupleProtocolTestStruct::binary_fingerprint,
  trlo_metas_DebugProtoTest_445624EC1C1E048FBC1B0F8F5E0DE934,
  trlo_specs_DebugProtoTest_445624EC1C1E048FBC1B0F8F5E0DE934);

::apache::thrift::reflection::local::TypeSpec* TupleProtocolTestStruct::local_reflection = 
  &trlo_typespec_DebugProtoTest_445624EC1C1E048FBC1B0F8F5E0DE934;

uint32_t TupleProtocolTestStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case -12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TupleProtocolTestStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TupleProtocolTestStruct");
  if (this->__isset.field12) {
    xfer += oprot->writeFieldBegin("field12", ::apache::thrift::protocol::T_I32, -12);
    xfer += oprot->writeI32(this->field12);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field11) {
    xfer += oprot->writeFieldBegin("field11", ::apache::thrift::protocol::T_I32, -11);
    xfer += oprot->writeI32(this->field11);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field10) {
    xfer += oprot->writeFieldBegin("field10", ::apache::thrift::protocol::T_I32, -10);
    xfer += oprot->writeI32(this->field10);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field9) {
    xfer += oprot->writeFieldBegin("field9", ::apache::thrift::protocol::T_I32, -9);
    xfer += oprot->writeI32(this->field9);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field8) {
    xfer += oprot->writeFieldBegin("field8", ::apache::thrift::protocol::T_I32, -8);
    xfer += oprot->writeI32(this->field8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field7) {
    xfer += oprot->writeFieldBegin("field7", ::apache::thrift::protocol::T_I32, -7);
    xfer += oprot->writeI32(this->field7);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field6) {
    xfer += oprot->writeFieldBegin("field6", ::apache::thrift::protocol::T_I32, -6);
    xfer += oprot->writeI32(this->field6);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field5) {
    xfer += oprot->writeFieldBegin("field5", ::apache::thrift::protocol::T_I32, -5);
    xfer += oprot->writeI32(this->field5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field4) {
    xfer += oprot->writeFieldBegin("field4", ::apache::thrift::protocol::T_I32, -4);
    xfer += oprot->writeI32(this->field4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field3) {
    xfer += oprot->writeFieldBegin("field3", ::apache::thrift::protocol::T_I32, -3);
    xfer += oprot->writeI32(this->field3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field2) {
    xfer += oprot->writeFieldBegin("field2", ::apache::thrift::protocol::T_I32, -2);
    xfer += oprot->writeI32(this->field2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field1) {
    xfer += oprot->writeFieldBegin("field1", ::apache::thrift::protocol::T_I32, -1);
    xfer += oprot->writeI32(this->field1);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
